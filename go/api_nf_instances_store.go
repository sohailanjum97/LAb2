/*
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.0.alpha-4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	//"github.com/gorilla/mux"
)

// A NFInstancesStoreApiController binds http requests to an api service and writes the service results to the http response
type NFInstancesStoreApiController struct {
	service NFInstancesStoreApiServicer
}

// NewNFInstancesStoreApiController creates a default api controller
func NewNFInstancesStoreApiController(s NFInstancesStoreApiServicer) Router {
	return &NFInstancesStoreApiController{service: s}
}

// Routes returns all of the api route for the NFInstancesStoreApiController
func (c *NFInstancesStoreApiController) Routes() Routes {
	return Routes{
		{
			"SearchNFInstances",
			strings.ToUpper("Get"),
			"/nnrf-disc/v1/nf-instances",
			c.SearchNFInstances,
		},
	}
}

// SearchNFInstances - Search a collection of NF Instances
func (c *NFInstancesStoreApiController) SearchNFInstances(w http.ResponseWriter, r *http.Request) {

	query := r.URL.Query()
	var myNfType NfType
	var myNfStatus NfType
	var mytargetnfinstanceid string
	var myPlmnList []PlmnId

	targetNfType := query.Get("targetNfType")
	requesterNfType := query.Get("requesterNfType")
	targetNfInstanceId := query.Get("targetNfInstanceId")
	targetPlmnList := query.Get("targetPlmnList")

	targetNfTypeMarshall, _ := json.Marshal(targetNfType)
	requesterNfTypeMarshall, _ := json.Marshal(requesterNfType)
	targetNfInstanceIdMarshall, _ := json.Marshal(targetNfInstanceId)
	targetPlmnListmarshall, _ := json.Marshal(targetPlmnList)

	json.Unmarshal(targetNfTypeMarshall, &myNfType)
	json.Unmarshal(requesterNfTypeMarshall, &myNfStatus)
	json.Unmarshal(targetNfInstanceIdMarshall, &mytargetnfinstanceid)
	json.Unmarshal(targetPlmnListmarshall, &myPlmnList)

	result, err := c.service.SearchNFInstances(myNfType, myNfStatus, myPlmnList, mytargetnfinstanceid)
	if err == nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
