/*
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery Service. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.0.alpha-4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"fmt"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

// NFInstancesStoreApiService is a service that implents the logic for the NFInstancesStoreApiServicer
// This service should implement the business logic for every endpoint for the NFInstancesStoreApi API.
// Include any external packages or services that will be required by this service.
type NFInstancesStoreApiService struct {
}

// NewNFInstancesStoreApiService creates a default api service
func NewNFInstancesStoreApiService() NFInstancesStoreApiServicer {
	return &NFInstancesStoreApiService{}
}

// SearchNFInstances - Search a collection of NF Instances
func (s *NFInstancesStoreApiService) SearchNFInstances(targetNfType NfType, requesterNfType NfType, targetPlmnList []PlmnId, targetNfInstanceId string) (interface{}, error) {

	//empArray, err := ioutil.ReadFile("names.json")
	//check(err)
	//fmt.Print(empArray)
	//The Json File Data structured here
	jsonData := `[
		 {
			 "nfInstanceId": "1",
			 "nfType": "NRF",
			 "nfStatus": "test",
			 "plmnList": {
				 "mcc": "1",
				 "mnn": "111",
				 "country": "India"
			 },
			 "AllowedNfTypes" : "NRF"
		 },
		 {
			 "nfInstanceId": "2",
			 "nfType": "Mr. Boss",
			 "nfStatus": "test",
			 "plmnList": {
				 "mcc": "1",
				 "mnn": "111",
				 "country": "India"
			 }
		 },
		 {
			 "nfInstanceId": 3,
			 "nfType": "Mr. Boss",
			 "nfStatus": "test",
			 "plmnList": [{
				 "mcc": "1",
				 "mnn": "111",
				 "country": "India"
			 }]
		 }
 
	 ]`

	var results []map[string]interface{}
	var out []map[string]interface{}

	// Unmarshal or Decode the JSON to the interface.
	json.Unmarshal([]byte(jsonData), &results)
	fmt.Println(results)

	//using for loop in order to check and match the parameters in the json file
	for i := 0; i < len(results); i++ {
		// This If condition is used to reterive manadatory parameters after filtering based on the query parameters
		if results[i]["nfType"] == targetNfType && results[i]["AllowedNfTypes"] == requesterNfType {
			out = append(out, results[i])
		}
		print(out)
	}

	// TODO - update SearchNFInstances with the required logic for this service method.
	// Add api_nf_instances_store_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	return out, errors.New("service method 'SearchNFInstances' not implemented")
}
